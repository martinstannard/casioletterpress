// Generated by CoffeeScript 1.3.1
var Bag, TheBag, app, express, http, io, path, routes, server, status, user, _;

express = require('express');

routes = require('./routes');

user = require('./routes/user');

http = require('http');

path = require('path');

_ = require('underscore');

app = express();

app.configure(function() {
  app.set('port', process.env.PORT || 3000);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.favicon());
  app.use(express.logger('dev'));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  return app.use(express["static"](path.join(__dirname, 'public')));
});

app.configure('development', function() {
  return app.use(express.errorHandler());
});

app.get('/', routes.index);

app.get('/users', user.list);

server = http.createServer(app);

io = require('socket.io').listen(server);

server.listen(app.get('port'), function() {
  return console.log("Express server listening on port " + app.get('port'));
});

status = "All is well.";

Bag = (function() {

  Bag.name = 'Bag';

  function Bag() {
    this.validWords();
    this.grabLetters();
  }

  Bag.prototype.grabLetters = function() {
    var bag;
    bag = "AAABCDDDEEEEFGHHIIIJKKLLLLMMMMNNNNOOOOPPPPPPQRRRRlRSSSTTTTUUUVWWWXYYYZ";
    return this.letters = _.map([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], function() {
      return bag[Math.floor(Math.random() * bag.length)];
    });
  };

  Bag.prototype.validWords = function() {};

  Bag.prototype.wordIsInBag = function(word) {
    return true;
  };

  Bag.prototype.isValidWord = function(word) {
    return true;
  };

  return Bag;

})();

TheBag = new Bag;

io.sockets.on('connection', function(socket) {
  io.sockets.emit('status', {
    status: status
  });
  io.sockets.emit('letters', {
    letters: TheBag.letters
  });
  return socket.on('reset', function(data) {
    console.log('resetting');
    status = "War is imminent!";
    return io.sockets.emit('status', {
      status: status
    });
  });
});
