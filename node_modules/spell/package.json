{
  "name": "spell",
  "description": "javascript dictionary module for node.js, and the browser",
  "homepage": "http://github.com/dscape/spell",
  "repository": {
    "type": "git",
    "url": "git://github.com/dscape/spell"
  },
  "version": "0.3.0",
  "author": {
    "name": "Nuno Job",
    "email": "nunojobpinto@gmail.com",
    "url": "http://nunojob.com"
  },
  "contributors": [
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "http://metaduck.com"
    }
  ],
  "keywords": [
    "spell",
    "speller",
    "dictionary",
    "nlp",
    "dict",
    "spell check"
  ],
  "devDependencies": {
    "mocha": "0.3.6",
    "should": "0.3.2"
  },
  "main": "./spell.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --globals _test_spell -r should test/spell.js",
    "perf1": "node --prof --trace-opt --trace-bailout --trace-deopt test/perf.js 1",
    "perf2": "node --prof --trace-opt --trace-bailout --trace-deopt test/perf.js 2"
  },
  "engines": {
    "node": ">=0.3.6"
  },
  "readme": "# spell\n\n`spell` is a dictionary module for `node.js`. for an explanation of the algorithm, performance, expectations, and techniques used please read [this article][norvig]\n\n# installation\n\n## node.js\n\n1. install [npm]\n2. `npm install spell`\n3. `var spell = require('spell');`\n\n## browser\n\n1. minimize spell.js\n2. load it into your webpage\n\n# usage\n\n## basics\n\n``` js\n// instantiate a new dictionary\nvar dict = spell();\n// load text into dictionary so we can train the dictionary to know\n// which words exists and which ones are more frequent than others\ndict.load(\"I am going to the park with Theo today. It's going to be the bomb\");\nconsole.log(dict.suggest('thew'));\n```\n\nnormally you would generate the dictionary once and then use it to this code is unlikely  and serves for demonstration purposes only. this should log:\n\n``` js\n[{\"word\": \"the\", \"score\": 2}, {\"word\": \"theo\", \"score\": 1}]\n```\n\nas there are two occurrences of the word `the` and one of the word `theo`\n\nfeeling lucky?\n\n``` js\ndict.lucky('thew');\n```\n\nreturns:\n\n``` js\n\"the\"\n```\n\nyou can also `add` and `remove` words from the dictionary:\n\n``` js\ndict.remove_word('park');\ndict.add_word('nuno');\n```\n\nand you can `reset` the dictionary, making it empty:\n\n``` js\ndict.reset();\n```\n\nif you want to export the dictionary:\n\n``` js\ndict.export();\n```\n\n## advanced\n\nwhen loading you can provide a compiled dictionary instead of free form text\n\n``` js\ndict.load(\n  { corpus: \n    { \"I\"     : 1\n    , \"am\"    : 1\n    , \"going\" : 1\n    , \"to\"    : 2\n    , \"the\"   : 1\n    , \"park\"  : 1\n    }\n  }\n);\n```\n\nyou can also provide options:\n\n* `reset`, defaults to true, meaning it will reset the dictionary before running load\n* `store`, defaults to true, meaning it will store the dictionary after running load\n* `after_store`, defaults to empty function, the callback function to run after `store` is done\n\ne.g. to add text to an existing `dict` you could do:\n\n``` js\ndict.load(\"Better yet, chocolate\", { reset: false } );\n```\n\nfinally when adding words you can optionally give it a score:\n\n``` js\ndict.add_word('beer', {score: 100});\n```\n\nif you are working with words that include punctuation in your dictionary you might need to override the alphabet that is being used. e.g. you might want to add `.` & `@` if you have a dictionary of email address. you can do that by:\n\n``` js\n// instantiate a new dictionary\nvar dict = spell();\n// load text into dictionary so we can train the dictionary to know\n// which words exists and which ones are more frequent than others\ndict.load(\"nuno@dino.saur pedro@space.ship\");\nconsole.log(dict.suggest('nuno@dino.sau',\n  \"abcdefghijklmnopqrstuvwxyz.@\".split(\"\")\n));\n```\n\n## storage\n\nby default `dict` is stored in process (memory) for each dictionary instance you create. however if you feel like storing the dictionary externally, or use a shared dictionary, you can:\n\nan example using `localStorage`:\n\n``` js\nvar dict = spell(\n  { \"get\"   : function () { \n                JSON.parse(window.localStorage.getItem('dict')); \n              }\n  , \"store\" : function (dict,after_store) { \n                window.localStorage.setItem('dict', JSON.stringify(dict));\n              }\n  }\n);\n```\n\n# roadmap\n\ncheck [issues]\n\n# contribute\n\neveryone is welcome to contribute. patches, bug-fixes, new features\n\n1. create an [issue][issues] so the community can comment on your idea\n2. fork `spell`\n3. create a new branch `git checkout -b my_branch`\n4. create tests for the changes you made\n5. make sure you pass both existing and newly inserted tests\n6. commit your changes\n7. push to your branch `git push origin my_branch`\n8. create an pull request\n\n# meta\n\n* code: `git clone git://github.com/dscape/spell.git`\n* home: <http://github.com/dscape/spell>\n* bugs: <http://github.com/dscape/spell/issues>\n* build: [![build status](https://secure.travis-ci.org/dscape/spell.png)](http://travis-ci.org/dscape/spell)\n\n`(oO)--',-` in [caos]\n\n[npm]: http://npmjs.org\n[issues]: http://github.com/dscape/spell/issues\n[caos]: http://caos.di.uminho.pt/\n[norvig]: http://norvig.com/spell-correct.html",
  "readmeFilename": "README.md",
  "_id": "spell@0.3.0",
  "dist": {
    "shasum": "f4f2715694636d87ebbcbffa2fe74631cfcc6605"
  },
  "_from": "spell@*"
}
